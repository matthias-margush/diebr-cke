(ns diebr端cke.gen-test
  (:require [clojure.test :refer [deftest is testing]]
            [diebr端cke.gen :as gen])
  (:import (org.apache.kafka.streams.kstream KStream)))

(deftest generate-test
  (is (= '((defmulti join dispatcher)
           (defmethod
            join
            [KStream KStream :fn JoinWindows]
            [k-stream other-stream joiner windows]
            (.join
             k-stream
             other-stream
             (reify
              ValueJoiner
              (apply [_ value-1 value-2] (joiner value-1 value-2)))
             windows))
           (defmethod
            join
            [KStream :fn :fn :fn]
            [k-stream global-table key-selector joiner]
            (.join
             k-stream
             (reify GlobalKTable (queryableStoreName [_] (global-table)))
             (reify
              KeyValueMapper
              (apply
               [_ key value]
               (let [[k v] (key-selector [key value])] (KeyValue. k v))))
             (reify
              ValueJoiner
              (apply [_ value-1 value-2] (joiner value-1 value-2)))))
           (defmethod
            join
            [KStream KStream :fn JoinWindows Joined]
            [k-stream other-stream joiner windows joined]
            (.join
             k-stream
             other-stream
             (reify
              ValueJoiner
              (apply [_ value-1 value-2] (joiner value-1 value-2)))
             windows
             joined))
           (defmethod
            join
            [KStream KTable :fn]
            [k-stream table joiner]
            (.join
             k-stream
             table
             (reify
              ValueJoiner
              (apply [_ value-1 value-2] (joiner value-1 value-2))))))
         (take 5 (:fns (gen/generate [KStream]))))))

(deftest generate-test
  (is (= "(ns diebr端cke.streams\n  (:require [diebr端cke.dispatcher :refer [dispatcher]])\n  (:import (java.lang String)\n           (org.apache.kafka.streams KeyValue)\n           (org.apache.kafka.streams.kstream Printed ValueTransformerSupplier StreamJoined GlobalKTable Produced KeyValueMapper ValueMapper ForeachAction Joined Named KGroupedStream JoinWindows Grouped ValueMapperWithKey ValueJoiner KTable TransformerSupplier Predicate ValueTransformerWithKeySupplier KStream Materialized Serialized)\n           (org.apache.kafka.streams.processor ProcessorSupplier TopicNameExtractor))\n  (:refer-clojure :only [boolean defmethod defmulti let reify]))\n\n(defmulti join dispatcher)\n\n(defmethod join [KStream KStream :fn JoinWindows]\n  [k-stream other-stream joiner windows]\n  (.join k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows))\n\n(defmethod join [KStream :fn :fn :fn]\n  [k-stream global-table key-selector joiner]\n  (.join k-stream (reify GlobalKTable (queryableStoreName [_] (global-table))) (reify KeyValueMapper (apply [_ key value] (let [[k v] (key-selector [key value])] (KeyValue. k v)))) (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2)))))\n\n(defmethod join [KStream KStream :fn JoinWindows Joined]\n  [k-stream other-stream joiner windows joined]\n  (.join k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows joined))\n\n(defmethod join [KStream KTable :fn]\n  [k-stream table joiner]\n  (.join k-stream table (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2)))))\n\n(defmethod join [KStream KStream :fn JoinWindows StreamJoined]\n  [k-stream other-stream joiner windows stream-joined]\n  (.join k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows stream-joined))\n\n(defmethod join [KStream KTable :fn Joined]\n  [k-stream table joiner joined]\n  (.join k-stream table (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) joined))\n\n(defmethod join [KStream :fn :fn :fn Named]\n  [k-stream global-table key-selector joiner named]\n  (.join k-stream (reify GlobalKTable (queryableStoreName [_] (global-table))) (reify KeyValueMapper (apply [_ key value] (let [[k v] (key-selector [key value])] (KeyValue. k v)))) (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) named))\n\n(defmulti peek dispatcher)\n\n(defmethod peek [KStream :fn]\n  [k-stream action]\n  (.peek k-stream (reify ForeachAction (apply [_ key value] (do (action [key value]) nil)))))\n\n(defmethod peek [KStream :fn Named]\n  [k-stream action named]\n  (.peek k-stream (reify ForeachAction (apply [_ key value] (do (action [key value]) nil))) named))\n\n(defmulti group-by dispatcher)\n\n(defmethod group-by [KStream :fn Serialized]\n  [k-stream key-selector serialized]\n  (.groupBy k-stream (reify KeyValueMapper (apply [_ key value] (key-selector [key value]))) serialized))\n\n(defmethod group-by [KStream :fn]\n  [k-stream key-selector]\n  (.groupBy k-stream (reify KeyValueMapper (apply [_ key value] (key-selector [key value])))))\n\n(defmethod group-by [KStream :fn Grouped]\n  [k-stream key-selector grouped]\n  (.groupBy k-stream (reify KeyValueMapper (apply [_ key value] (key-selector [key value]))) grouped))\n\n(defmulti branch dispatcher)\n\n(defmethod branch [KStream (Class/forName \"[Lorg.apache.kafka.streams.kstream.Predicate;\")]\n  [k-stream predicates]\n  (.branch k-stream predicates))\n\n(defmethod branch [KStream Named (Class/forName \"[Lorg.apache.kafka.streams.kstream.Predicate;\")]\n  [k-stream named predicates]\n  (.branch k-stream named predicates))\n\n(defmulti to-table dispatcher)\n\n(defmethod to-table [KStream Materialized]\n  [k-stream materialized]\n  (.toTable k-stream materialized))\n\n(defmethod to-table [KStream Named]\n  [k-stream named]\n  (.toTable k-stream named))\n\n(defmethod to-table [KStream Named Materialized]\n  [k-stream named materialized]\n  (.toTable k-stream named materialized))\n\n(defmethod to-table [KStream]\n  [k-stream]\n  (.toTable k-stream))\n\n(defmulti to dispatcher)\n\n(defmethod to [KStream :fn Produced]\n  [k-stream topic-extractor produced]\n  (.to k-stream (reify TopicNameExtractor (extract [_ key value record-context] (topic-extractor record-context [key value]))) produced))\n\n(defmethod to [KStream String Produced]\n  [k-stream topic produced]\n  (.to k-stream topic produced))\n\n(defmethod to [KStream String]\n  [k-stream topic]\n  (.to k-stream topic))\n\n(defmethod to [KStream :fn]\n  [k-stream topic-extractor]\n  (.to k-stream (reify TopicNameExtractor (extract [_ key value record-context] (topic-extractor record-context [key value])))))\n\n(defmulti filter-not dispatcher)\n\n(defmethod filter-not [KStream :fn]\n  [k-stream predicate]\n  (.filterNot k-stream (reify Predicate (test [_ key value] (boolean (predicate [key value]))))))\n\n(defmethod filter-not [KStream :fn Named]\n  [k-stream predicate named]\n  (.filterNot k-stream (reify Predicate (test [_ key value] (boolean (predicate [key value])))) named))\n\n(defmulti group-by-key dispatcher)\n\n(defmethod group-by-key [KStream Grouped]\n  [k-stream grouped]\n  (.groupByKey k-stream grouped))\n\n(defmethod group-by-key [KStream]\n  [k-stream]\n  (.groupByKey k-stream))\n\n(defmethod group-by-key [KStream Serialized]\n  [k-stream serialized]\n  (.groupByKey k-stream serialized))\n\n(defmulti flat-transform-values dispatcher)\n\n(defmulti flat-transform-values-with-key dispatcher)\n\n(defmethod flat-transform-values [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier state-store-names]\n  (.flatTransformValues k-stream (reify ValueTransformerSupplier (get [_] (value-transformer-supplier))) state-store-names))\n\n(defmethod flat-transform-values-with-key [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier named state-store-names]\n  (.flatTransformValues k-stream (reify ValueTransformerWithKeySupplier (get [_] (value-transformer-supplier))) named state-store-names))\n\n(defmethod flat-transform-values [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier named state-store-names]\n  (.flatTransformValues k-stream (reify ValueTransformerSupplier (get [_] (value-transformer-supplier))) named state-store-names))\n\n(defmethod flat-transform-values-with-key [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier state-store-names]\n  (.flatTransformValues k-stream (reify ValueTransformerWithKeySupplier (get [_] (value-transformer-supplier))) state-store-names))\n\n(defmulti transform-values dispatcher)\n\n(defmulti transform-values-with-key dispatcher)\n\n(defmethod transform-values-with-key [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier state-store-names]\n  (.transformValues k-stream (reify ValueTransformerWithKeySupplier (get [_] (value-transformer-supplier))) state-store-names))\n\n(defmethod transform-values [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier state-store-names]\n  (.transformValues k-stream (reify ValueTransformerSupplier (get [_] (value-transformer-supplier))) state-store-names))\n\n(defmethod transform-values-with-key [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier named state-store-names]\n  (.transformValues k-stream (reify ValueTransformerWithKeySupplier (get [_] (value-transformer-supplier))) named state-store-names))\n\n(defmethod transform-values [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream value-transformer-supplier named state-store-names]\n  (.transformValues k-stream (reify ValueTransformerSupplier (get [_] (value-transformer-supplier))) named state-store-names))\n\n(defmulti process dispatcher)\n\n(defmethod process [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream processor-supplier named state-store-names]\n  (.process k-stream (reify ProcessorSupplier (get [_] (processor-supplier))) named state-store-names))\n\n(defmethod process [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream processor-supplier state-store-names]\n  (.process k-stream (reify ProcessorSupplier (get [_] (processor-supplier))) state-store-names))\n\n(defmulti left-join dispatcher)\n\n(defmethod left-join [KStream KTable :fn]\n  [k-stream table joiner]\n  (.leftJoin k-stream table (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2)))))\n\n(defmethod left-join [KStream KStream :fn JoinWindows]\n  [k-stream other-stream joiner windows]\n  (.leftJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows))\n\n(defmethod left-join [KStream KTable :fn Joined]\n  [k-stream table joiner joined]\n  (.leftJoin k-stream table (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) joined))\n\n(defmethod left-join [KStream KStream :fn JoinWindows StreamJoined]\n  [k-stream other-stream joiner windows stream-joined]\n  (.leftJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows stream-joined))\n\n(defmethod left-join [KStream :fn :fn :fn]\n  [k-stream global-table key-selector value-joiner]\n  (.leftJoin k-stream (reify GlobalKTable (queryableStoreName [_] (global-table))) (reify KeyValueMapper (apply [_ key value] (let [[k v] (key-selector [key value])] (KeyValue. k v)))) (reify ValueJoiner (apply [_ value-1 value-2] (value-joiner value-1 value-2)))))\n\n(defmethod left-join [KStream :fn :fn :fn Named]\n  [k-stream global-table key-selector value-joiner named]\n  (.leftJoin k-stream (reify GlobalKTable (queryableStoreName [_] (global-table))) (reify KeyValueMapper (apply [_ key value] (let [[k v] (key-selector [key value])] (KeyValue. k v)))) (reify ValueJoiner (apply [_ value-1 value-2] (value-joiner value-1 value-2))) named))\n\n(defmethod left-join [KStream KStream :fn JoinWindows Joined]\n  [k-stream other-stream joiner windows joined]\n  (.leftJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows joined))\n\n(defmulti foreach dispatcher)\n\n(defmethod foreach [KStream :fn Named]\n  [k-stream action named]\n  (.foreach k-stream (reify ForeachAction (apply [_ key value] (do (action [key value]) nil))) named))\n\n(defmethod foreach [KStream :fn]\n  [k-stream action]\n  (.foreach k-stream (reify ForeachAction (apply [_ key value] (do (action [key value]) nil)))))\n\n(defmulti map dispatcher)\n\n(defmethod map [KStream :fn Named]\n  [k-stream mapper named]\n  (.map k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v)))) named))\n\n(defmethod map [KStream :fn]\n  [k-stream mapper]\n  (.map k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v))))))\n\n(defmulti filter dispatcher)\n\n(defmethod filter [KStream :fn]\n  [k-stream predicate]\n  (.filter k-stream (reify Predicate (test [_ key value] (boolean (predicate [key value]))))))\n\n(defmethod filter [KStream :fn Named]\n  [k-stream predicate named]\n  (.filter k-stream (reify Predicate (test [_ key value] (boolean (predicate [key value])))) named))\n\n(defmulti flat-map dispatcher)\n\n(defmethod flat-map [KStream :fn Named]\n  [k-stream mapper named]\n  (.flatMap k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v)))) named))\n\n(defmethod flat-map [KStream :fn]\n  [k-stream mapper]\n  (.flatMap k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v))))))\n\n(defmulti through dispatcher)\n\n(defmethod through [KStream String]\n  [k-stream topic]\n  (.through k-stream topic))\n\n(defmethod through [KStream String Produced]\n  [k-stream topic produced]\n  (.through k-stream topic produced))\n\n(defmulti merge dispatcher)\n\n(defmethod merge [KStream KStream]\n  [k-stream stream]\n  (.merge k-stream stream))\n\n(defmethod merge [KStream KStream Named]\n  [k-stream stream named]\n  (.merge k-stream stream named))\n\n(defmulti outer-join dispatcher)\n\n(defmethod outer-join [KStream KStream :fn JoinWindows Joined]\n  [k-stream other-stream joiner windows joined]\n  (.outerJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows joined))\n\n(defmethod outer-join [KStream KStream :fn JoinWindows]\n  [k-stream other-stream joiner windows]\n  (.outerJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows))\n\n(defmethod outer-join [KStream KStream :fn JoinWindows StreamJoined]\n  [k-stream other-stream joiner windows stream-joined]\n  (.outerJoin k-stream other-stream (reify ValueJoiner (apply [_ value-1 value-2] (joiner value-1 value-2))) windows stream-joined))\n\n(defmulti print dispatcher)\n\n(defmethod print [KStream Printed]\n  [k-stream printed]\n  (.print k-stream printed))\n\n(defmulti flat-map-values dispatcher)\n\n(defmulti flat-map-values-with-key dispatcher)\n\n(defmethod flat-map-values [KStream :fn]\n  [k-stream mapper]\n  (.flatMapValues k-stream (reify ValueMapper (apply [_ value] (mapper value)))))\n\n(defmethod flat-map-values-with-key [KStream :fn Named]\n  [k-stream mapper named]\n  (.flatMapValues k-stream (reify ValueMapperWithKey (apply [_ read-only-key value] (mapper [read-only-key value]))) named))\n\n(defmethod flat-map-values-with-key [KStream :fn]\n  [k-stream mapper]\n  (.flatMapValues k-stream (reify ValueMapperWithKey (apply [_ read-only-key value] (mapper [read-only-key value])))))\n\n(defmethod flat-map-values [KStream :fn Named]\n  [k-stream mapper named]\n  (.flatMapValues k-stream (reify ValueMapper (apply [_ value] (mapper value))) named))\n\n(defmulti transform dispatcher)\n\n(defmethod transform [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream transformer-supplier state-store-names]\n  (.transform k-stream (reify TransformerSupplier (get [_] (transformer-supplier))) state-store-names))\n\n(defmethod transform [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream transformer-supplier named state-store-names]\n  (.transform k-stream (reify TransformerSupplier (get [_] (transformer-supplier))) named state-store-names))\n\n(defmulti map-values dispatcher)\n\n(defmulti map-values-with-key dispatcher)\n\n(defmethod map-values [KStream :fn Named]\n  [k-stream mapper named]\n  (.mapValues k-stream (reify ValueMapper (apply [_ value] (mapper value))) named))\n\n(defmethod map-values [KStream :fn]\n  [k-stream mapper]\n  (.mapValues k-stream (reify ValueMapper (apply [_ value] (mapper value)))))\n\n(defmethod map-values-with-key [KStream :fn]\n  [k-stream mapper]\n  (.mapValues k-stream (reify ValueMapperWithKey (apply [_ read-only-key value] (mapper [read-only-key value])))))\n\n(defmethod map-values-with-key [KStream :fn Named]\n  [k-stream mapper named]\n  (.mapValues k-stream (reify ValueMapperWithKey (apply [_ read-only-key value] (mapper [read-only-key value]))) named))\n\n(defmulti select-key dispatcher)\n\n(defmethod select-key [KStream :fn Named]\n  [k-stream mapper named]\n  (.selectKey k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v)))) named))\n\n(defmethod select-key [KStream :fn]\n  [k-stream mapper]\n  (.selectKey k-stream (reify KeyValueMapper (apply [_ key value] (let [[k v] (mapper [key value])] (KeyValue. k v))))))\n\n(defmulti flat-transform dispatcher)\n\n(defmethod flat-transform [KStream :fn Named (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream transformer-supplier named state-store-names]\n  (.flatTransform k-stream (reify TransformerSupplier (get [_] (transformer-supplier))) named state-store-names))\n\n(defmethod flat-transform [KStream :fn (Class/forName \"[Ljava.lang.String;\")]\n  [k-stream transformer-supplier state-store-names]\n  (.flatTransform k-stream (reify TransformerSupplier (get [_] (transformer-supplier))) state-store-names))"
         (gen/render (gen/generate [KStream])))))
